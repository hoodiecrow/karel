
case insensitive

M: move
L: left
G: get
P: put
C: color
Q: quit

full-command ::= ?number-expression? command | var-definition|definition|selection|iteration
command ::= 'M'|'L'|'G'|'P'|'Q' |defined-command-letter| 'C' digit | '{' command-list '}'
color-number ::= '0'-'9' # '0' = no color
command-list ::= Îµ | full-command command-list
command-letter ::= M|L|G|P|Q|C
non-command-letter ::= A-Z \ command-letter
var-definition ::= ':' non-command-letter number-expression
definition ::= '=' non-command-letter command
selection ::= predicate '?' command ':' command
predicate ::= '?' predicate-code
predicate-code ::= FC|FB|LC|LB|RC|RB|SB|NB|FN|NN|FW|NW|FS|NS|FE|NE|BE|BN
iteration ::= predicate '*' command
comment ::= '#' text to newline

vardef ex :X10
definition example: =R{3L} # turn right

predicate for colors
Cd # d = digit color number--true if corner has that color

clear/blocked
FC/FB
LC/LB
RC/RB

some (one or more) beepers/no beeper present
SB/NB

direction
facing/not facing
FN/NN
FW/NW
FS/NS
FE/NE

?NN*L # turn left while not facing north

beeper bag
empty/not empty
BE/BN

---
representation:
	robot: ^|>|v|<
	beeper: digit or * for >= 10
	wall: ACS line
	corner: +
